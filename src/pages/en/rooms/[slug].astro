---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { getLangFromUrl, useTranslations } from '../../../i18n/utils';

export async function getStaticPaths() {
  const properties = await getCollection('properties');
  return properties.map((property) => ({
    params: { slug: property.slug },
    props: { property },
  }));
}

const { property } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Layout title={property.data.title}>
  <main>
    <div class="property-detail">
      <div class="gallery">
        <div class="main-image">
          <img 
            src={property.data.mainImage} 
            alt={property.data.title}
            id="mainImage"
            class="featured-image"
          >
        </div>
        <div class="thumbnails">
          {property.data.gallery.map((image, index) => (
            <img
              src={image}
              alt={`${property.data.title} - Imagen ${index + 1}`}
              class="thumbnail"
              data-image={image}
            />
          ))}
        </div>
      </div>

      <div class="property-info">
        <div class="info-card">
          <h1>{property.data.title}</h1>
          <p class="price">
            {property.data.price.toLocaleString('es-ES', {
              style: 'currency',
              currency: 'EUR',
            })}
          </p>
          <p class="location">{property.data.location}</p>

          <div class="features">
            <h2>Caracter√≠sticas</h2>
            <ul>
              <li>
                <span class="feature-icon">üõèÔ∏è</span>
                {property.data.features.bedrooms} Dormitorios
              </li>
              <li>
                <span class="feature-icon">üöø</span>
                {property.data.features.bathrooms} Ba√±os
              </li>
              <li>
                <span class="feature-icon">üìè</span>
                {property.data.squareMeters}m¬≤
              </li>
              {property.data.features.garage && (
                <li>
                  <span class="feature-icon">üöó</span>
                  Garaje
                </li>
              )}
              {property.data.features.pool && (
                <li>
                  <span class="feature-icon">üèä‚Äç‚ôÇÔ∏è</span>
                  Piscina
                </li>
              )}
              {property.data.features.garden && (
                <li>
                  <span class="feature-icon">üå≥</span>
                  Jard√≠n
                </li>
              )}
            </ul>
          </div>

          <div class="description" set:html={property.body}>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .property-detail {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }

  .gallery {
    position: sticky;
    top: 2rem;
  }

  .main-image {
    margin-bottom: 1rem;
    border-radius: 8px;
    overflow: hidden;
  }

  .featured-image {
    width: 100%;
    height: 400px;
    object-fit: cover;
    transition: all 0.3s ease;
  }

  .thumbnails {
    display: flex;
    gap: 1rem;
    overflow-x: auto;
    padding-bottom: 1rem;
  }

  .thumbnail {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .thumbnail:hover {
    transform: scale(1.05);
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
  }

  .property-info {
    color: #333;
  }

  .info-card {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  h1 {
    font-size: 2.5rem;
    margin: 0 0 1rem 0;
    color: #333;
  }

  .price {
    font-size: 2rem;
    color: rgb(var(--accent));
    margin: 0 0 0.5rem 0;
  }

  .location {
    font-size: 1.2rem;
    color: #666;
    margin: 0 0 2rem 0;
  }

  .features {
    border: 1px solid #666;
    background: #f5f5f5;
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 2rem;
  }

  .features h2 {
    margin: 0 0 1rem 0;
    color: #333;
  }

  .features ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    color: #444;
  }

  .features li {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .feature-icon {
    font-size: 1.5rem;
  }

  .description {
    line-height: 1.6;
    color: #444;
  }

  .description :global(h2) {
    color: #333;
    margin-top: 1.5rem;
  }

  .description :global(p) {
    margin: 1rem 0;
  }

  @media (max-width: 768px) {
    .property-detail {
      grid-template-columns: 1fr;
    }

    .gallery {
      position: relative;
      top: 0;
    }

    .featured-image {
      height: 300px;
    }
  }
</style>

<script>
  // Funci√≥n para cambiar la imagen principal
  function initializeGallery() {
    const mainImage = document.getElementById('mainImage') as HTMLImageElement;
    const thumbnails = document.querySelectorAll('.thumbnail');

    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', () => {
        const newImageSrc = thumbnail.getAttribute('data-image');
        if (newImageSrc && mainImage) {
          // Aplicar una transici√≥n suave
          mainImage.style.opacity = '0';
          setTimeout(() => {
            mainImage.src = newImageSrc;
            mainImage.style.opacity = '1';
          }, 300);
        }
      });
    });
  }

  // Inicializar la galer√≠a cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', initializeGallery);
</script>
