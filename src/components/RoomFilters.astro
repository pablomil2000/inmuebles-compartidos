---
interface Props {
  minPrice?: number;
  maxPrice?: number;
  features?: string[];
}

const { 
  minPrice = 0, 
  maxPrice = 1000, 
  features = ['individual', 'shared', 'private_bathroom', 'shared_bathroom', 'furnished', 'desk', 'tv', 'wifi', 'air_conditioning', 'heating']
} = Astro.props;

import { getLangFromUrl, useTranslations } from '../i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="filters-container">
  <form id="roomFilters" class="filters-form">
    <div class="filter-group">
      <h3>{t.filters.price}</h3>
      <div class="price-inputs">
        <div class="input-group">
          <label for="minPrice">{t.filters.min}</label>
          <input 
            type="number" 
            id="minPrice" 
            name="minPrice" 
            min="0" 
            max={maxPrice} 
            value={minPrice}
            step="50"
          >
        </div>
        <div class="input-group">
          <label for="maxPrice">{t.filters.max}</label>
          <input 
            type="number" 
            id="maxPrice" 
            name="maxPrice" 
            min={minPrice} 
            value={maxPrice}
            step="50"
          >
        </div>
      </div>
    </div>

    <div class="filter-group">
      <h3>{t.filters.room_type}</h3>
      <div class="checkbox-group">
        <label class="checkbox-label">
          <input type="checkbox" name="room_type" value="individual">
          {t.filters.individual}
        </label>
        <label class="checkbox-label">
          <input type="checkbox" name="room_type" value="shared">
          {t.filters.shared}
        </label>
      </div>
    </div>

    <div class="filter-group">
      <h3>{t.filters.bathroom}</h3>
      <div class="checkbox-group">
        <label class="checkbox-label">
          <input type="checkbox" name="bathroom" value="private">
          {t.filters.private_bathroom}
        </label>
        <label class="checkbox-label">
          <input type="checkbox" name="bathroom" value="shared">
          {t.filters.shared_bathroom}
        </label>
      </div>
    </div>

    <div class="filter-group">
      <h3>{t.filters.features}</h3>
      <div class="checkbox-group">
        {['furnished', 'desk', 'tv', 'wifi', 'air_conditioning', 'heating'].map(feature => (
          <label class="checkbox-label">
            <input 
              type="checkbox" 
              name="features" 
              value={feature}
            >
            {t.filters[feature as keyof typeof t.filters]}
          </label>
        ))}
      </div>
    </div>

    <button type="submit" class="apply-filters">
      {t.filters.apply}
    </button>
  </form>
</div>

<style>
  .filters-container {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 100px;
    height: fit-content;
  }

  .filters-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .filter-group {
    border-bottom: 1px solid #eee;
    padding-bottom: 1rem;
  }

  .filter-group:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }

  .filter-group h3 {
    margin: 0 0 1rem 0;
    font-size: 1.1rem;
    color: #333;
  }

  .price-inputs {
    display: flex;
    gap: 1rem;
  }

  .input-group {
    flex: 1;
  }

  .input-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #666;
    font-size: 0.9rem;
  }

  .input-group input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #444;
    cursor: pointer;
  }

  .checkbox-label input[type="checkbox"] {
    width: 1.2rem;
    height: 1.2rem;
    cursor: pointer;
  }

  .apply-filters {
    width: 100%;
    padding: 0.75rem;
    background: rgb(var(--accent));
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .apply-filters:hover {
    background: rgb(var(--accent-dark));
  }

  @media (max-width: 768px) {
    .filters-container {
      position: relative;
      top: 0;
      margin-bottom: 2rem;
    }
  }
</style>

<script>
  function initializeFilters() {
    const form = document.getElementById('roomFilters') as HTMLFormElement;
    const rooms = document.querySelectorAll('.room-card');

    if (!form || !rooms.length) return;

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      
      const filters = {
        minPrice: Number(formData.get('minPrice')) || 0,
        maxPrice: Number(formData.get('maxPrice')) || Infinity,
        roomTypes: formData.getAll('room_type'),
        bathrooms: formData.getAll('bathroom'),
        features: formData.getAll('features')
      };

      rooms.forEach(room => {
        const price = Number(room.getAttribute('data-price')) || 0;
        const roomType = room.getAttribute('data-room-type');
        const bathroom = room.getAttribute('data-bathroom');
        const roomFeatures = JSON.parse(room.getAttribute('data-features') || '[]');

        const matchesPrice = price >= filters.minPrice && price <= filters.maxPrice;
        const matchesRoomType = filters.roomTypes.length === 0 || filters.roomTypes.includes(roomType || '');
        const matchesBathroom = filters.bathrooms.length === 0 || filters.bathrooms.includes(bathroom || '');
        const matchesFeatures = filters.features.length === 0 || 
          filters.features.every(feature => roomFeatures.includes(feature));

        const element = room as HTMLElement;
        if (matchesPrice && matchesRoomType && matchesBathroom && matchesFeatures) {
          element.style.display = '';
        } else {
          element.style.display = 'none';
        }
      });
    });

    // Initialize price inputs
    const minPriceInput = form.querySelector('#minPrice') as HTMLInputElement;
    const maxPriceInput = form.querySelector('#maxPrice') as HTMLInputElement;

    minPriceInput?.addEventListener('change', () => {
      if (maxPriceInput) {
        maxPriceInput.min = minPriceInput.value;
      }
    });

    maxPriceInput?.addEventListener('change', () => {
      if (minPriceInput) {
        minPriceInput.max = maxPriceInput.value;
      }
    });
  }

  // Initialize filters when the DOM is loaded
  document.addEventListener('DOMContentLoaded', initializeFilters);
</script>
