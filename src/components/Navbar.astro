---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const currentPath = Astro.url.pathname;
const basePath = lang === 'en' ? '/en' : '';

// Función para generar la URL alternativa
function getAlternateUrl(currentPath: string, currentLang: string): string {
  if (currentLang === 'en') {
    // Si estamos en inglés, quitamos /en/ del path
    return currentPath.replace('/en/', '/');
  } else {
    // Si estamos en español, añadimos /en/ al path
    return currentPath.replace('/', '/en/');
  }
}

const alternateUrl = getAlternateUrl(currentPath, lang);
---

<nav class:list={["navbar"]}>
  <div class="nav-content">
    <a href={`${basePath}/`} class="logo">
      <img src="/logo.svg" alt="Logo" width="150" height="50">
    </a>

    <button class="menu-toggle" aria-label="Toggle menu">
      <span class="bar"></span>
      <span class="bar"></span>
      <span class="bar"></span>
    </button>

    <div class="nav-links">
      <button class:list={['nav-link', { active: currentPath === `${basePath}/` }]} data-url=`${basePath}/`>
        {t.nav.home}
      </button>
      <button class:list={['nav-link', { active: currentPath.includes('/properties') }]} data-url=`${basePath}/properties`>
        {t.nav.properties}
      </button>
      <button class:list={['nav-link', { active: currentPath.includes('/rooms') }]} data-url=`${basePath}/rooms`>
        {t.nav.rooms}
      </button>
      <button class:list={['nav-link', { active: currentPath.includes('/contact') }]} data-url=`${basePath}/contact`>
        {t.nav.contact}
      </button>

      <div class="language-switcher mobile">
        <a href={lang === 'en' ? currentPath.replace('/en', '') : alternateUrl} class:list={["flag-link", { active: lang === 'es' }]} aria-label="Español">
          <img src="/images/flags/es.svg" alt="Español" class="flag-icon" width="24" height="16">
        </a>
        <a href={lang === 'es' ? alternateUrl : currentPath} class:list={["flag-link", { active: lang === 'en' }]} aria-label="English">
          <img src="/images/flags/en.svg" alt="English" class="flag-icon" width="24" height="16">
        </a>
      </div>
    </div>

    <div class="language-switcher desktop">
      <a href={lang === 'en' ? currentPath.replace('/en', '') : alternateUrl} class:list={["flag-link", { active: lang === 'es' }]} aria-label="Español">
        <img src="/images/flags/es.svg" alt="Español" class="flag-icon" width="24" height="16">
      </a>
      <a href={lang === 'es' ? alternateUrl : currentPath} class:list={["flag-link", { active: lang === 'en' }]} aria-label="English">
        <img src="/images/flags/en.svg" alt="English" class="flag-icon" width="24" height="16">
      </a>
    </div>
  </div>
</nav>
<style>
  .navbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    z-index: 1000;
    transition: all 0.3s ease;
  }

  .navbar.scrolled {
    border-bottom: 2px solid rgb(var(--accent-light));
  }

  .nav-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: rgb(var(--accent));
    font-size: 1.5rem;
    font-weight: bold;
  }

  .menu-toggle {
    display: none;
    flex-direction: column;
    justify-content: space-between;
    width: 30px;
    height: 21px;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
    z-index: 10;
  }

  .menu-toggle .bar {
    height: 3px;
    width: 100%;
    background-color: #666;
    border-radius: 10px;
    transition: all 0.3s ease;
  }

  .menu-toggle.active .bar:nth-child(1) {
    transform: translateY(9px) rotate(45deg);
  }

  .menu-toggle.active .bar:nth-child(2) {
    opacity: 0;
  }

  .menu-toggle.active .bar:nth-child(3) {
    transform: translateY(-9px) rotate(-45deg);
  }

  .nav-links {
    display: flex;
    gap: 2rem;
  }

  .nav-link {
    color: #666;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
  }

  .nav-link:hover,
  .nav-link.active {
    color: rgb(var(--accent));
  }

  .language-switcher {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .language-switcher.mobile {
    display: none;
  }

  .flag-link {
    opacity: 0.6;
    transition: opacity 0.3s ease;
  }

  .flag-link:hover,
  .flag-link.active {
    opacity: 1;
  }

  .flag-icon {
    border-radius: 2px;
  }

  @media (max-width: 768px) {
    .menu-toggle {
      display: flex;
    }

    .nav-links {
      position: fixed;
      top: 0;
      right: -100%;
      height: 100vh;
      width: 100%;
      max-width: 300px;
      background: rgba(255, 255, 255, 0.98);
      flex-direction: column;
      padding: 5rem 2rem 2rem;
      transition: right 0.3s ease;
      box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
    }

    .nav-links.active {
      right: 0;
    }

    .language-switcher.desktop {
      display: none;
    }

    .language-switcher.mobile {
      display: flex;
      margin-top: 2rem;
    }
  }


  /* Estilos para que los botones parezcan enlaces */
button.nav-link {
  all: unset; /* Resetea todos los estilos por defecto del botón */
  color: #666; /* Color similar al de los enlaces */
  text-decoration: none;
  font-weight: 500;
  cursor: pointer; /* Hace que el cursor sea el de un enlace */
  transition: color 0.3s ease;
  display: inline; /* Se comporta como un enlace en línea */
  padding: 0; /* Elimina el padding del botón */
}

/* Efecto hover y estado activo */
button.nav-link:hover,
button.nav-link.active {
  color: rgb(var(--accent)); /* Mismo color que los enlaces activos */
  text-decoration: underline; /* Simula un enlace */
}

/* Opcional: si quieres que los botones tengan el mismo espacio entre elementos */
.nav-links {
  display: flex;
  gap: 2rem;
}
</style>

<script>

  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.querySelector('.menu-toggle');
    const navLinks = document.querySelector('.nav-links');

    menuToggle?.addEventListener('click', () => {
      menuToggle.classList.toggle('active');
      navLinks?.classList.toggle('active');
    });
  });

  // Add scroll effect
  const navbar = document.querySelector('.navbar');
  window.addEventListener('scroll', () => {
    if (window.scrollY > 0) {
      navbar?.classList.add('scrolled');
    } else {
      navbar?.classList.remove('scrolled');
    }
  });

  const buttons = document.querySelectorAll('button.nav-link');

  // Maneja los clics en cada botón
  buttons.forEach((button) => {
    button.addEventListener('click', (event) => {
      // Obtiene el valor del atributo `data-url`
      const url = event.currentTarget.dataset.url;

      // Muestra el valor en la consola
      console.log("Botón clicado con URL:", url);

      // Opcional: puedes redirigir a la URL almacenada en `data-url`
      if (url !== undefined) {
        window.location.href = url;
      }
    });
  });
  // console.log(window.location.href);
</script>
